#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
#define D_GRAVITY vec4(0.0, -1.0, 0.0, 9.8)


layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
} time;

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

layout(set = 2, binding = 0) buffer BladeInputBuffer {
    Blade blades[];
} bladeInputBuffer;

layout(set = 2, binding = 1) buffer BladeOutputBuffer {
    Blade culledBlades[];
} bladeOutputBuffer;

layout(set = 2, binding = 2) buffer NumBlades {
    uint vertexCount;
    uint instanceCount;
    uint firstVertex;
    uint firstInstance;
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

// Culling based on dist and view frustum
bool inFrustum(vec4 position) {
    vec4 clipPos = camera.proj * camera.view * position;
    return inBounds(clipPos.x / clipPos.w, 1.0) &&
           inBounds(clipPos.y / clipPos.w, 1.0) &&
           inBounds(clipPos.z / clipPos.w, 1.0);
}

vec3 getWindDirection(vec3 position) {
    float i_Time = time.totalTime;
    float windStrengthX = 0.0;
    float windStrengthZ = 5.0;
    float windStrengthY = 0.1;
    float freqX = 1.0;
    float freqZ = 1.0;
    float scale = 1.5;

    float windX = windStrengthX * sin(freqX * position.z + i_Time * scale);
    float windZ = windStrengthZ * cos(freqZ * position.x + i_Time * scale);
    float windY = windStrengthY * sin(i_Time * 0.2);

    //debug
    return vec3(windX, windY, windZ);
    return vec3(windX, windY, windZ);

}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // fetch data
    Blade blade = bladeInputBuffer.blades[gl_GlobalInvocationID.x];
    vec3 v0 = vec3(blade.v0);
    vec3 v1 = vec3(blade.v1);
    vec3 v2 = vec3(blade.v2);
    vec3 up = vec3(blade.up);
    float orientation = blade.v0.w;
    float height = blade.v1.w;
    float width = blade.v2.w;
    float stiffCoe = blade.up.w; // stiffness coefficient

    // Apply forces on every blade and update the vertices in the buffer
    // Gravity
    vec3 D_xyz = vec3(D_GRAVITY.xyz);
    float D_w = D_GRAVITY.w;
    vec3 gE = normalize(D_xyz) * D_w;
    vec3 f = cross(up, vec3(cos(orientation), 0.0, sin(orientation)));
    vec3 gF = (0.25) * length(gE) * f; // front gravity
    vec3 G = gE + gF; // total gravity

    // Recovery
    vec3 iv2 = v0 + height * up;
    vec3 R = (iv2 - v2) * stiffCoe; // recovery force

    // Wind
    vec3 w = getWindDirection(v0);
    float fd = 1 - abs(dot(normalize(w), normalize(v2 - v0)));
    float fr = dot((v2 - v0), up) / height;
    vec3 W = w * fd * fr;

    // total force
    vec3 tv2 = v2 + (G + R + W) * time.deltaTime;

    // validation
    tv2 = tv2 - up * min(up * (tv2 - v1), 0);
    float lproj = length(tv2 - v0 - up * dot((tv2 - v0), up));
    v1 = v0 + height * up * max(1.0 - lproj / height, 0.05 * max(lproj / height, 1.0));
    v2 = tv2;
    float l = (length(v0 - v2) + 2 * (length(v0 - v1) + length(v1 - v2))) / 3;
    float r = height / l;
    vec3 v1c = v0 + r * (v1 - v0);
    v2 = v1c + r * (v2 - v1);
    v1 = v1c;

    // update blade
    blade.v1 = vec4(v1, height);
    blade.v2 = vec4(v2, width);
    bladeInputBuffer.blades[gl_GlobalInvocationID.x] = blade;

    // Orientation Culling
    vec3 viewWidth = vec3(camera.view * vec4(cos(orientation), 0.0, sin(orientation), 0.0));
    if (abs(normalize(viewWidth).z) > 0.9) {
        return;
    }

    // View-frustum Culling
    vec4 pV0 = vec4(v0, 1.0);
    vec4 pV2 = vec4(v2, 1.0);
    vec4 pM = vec4(0.25 * v0 + 0.5 * v1 + 0.25 * v2, 1.0);
    if (!inFrustum(pV0) && !inFrustum(pV2) && !inFrustum(pM)) {
        return;
    }

    // Distance Cull
    vec3 CameraPos = vec3(camera.view * vec4(v0, 1.0));
    vec3 CameraUp = vec3(camera.view * vec4(up, 0.0));
    vec3 CameraLeft = cross(CameraUp, CameraPos);
    vec3 CameraFront = normalize(cross(CameraLeft, CameraUp));
    float dproj = dot(CameraFront, CameraPos);
    int dist_cull_level = 10;
    int dist_cull_max = 20;
    if ((gl_GlobalInvocationID.x % dist_cull_level) > floor(dist_cull_level * (1.0 - dproj / dist_cull_max))) {
        return;
    }

    // update culled blades
    bladeOutputBuffer.culledBlades[atomicAdd(numBlades.vertexCount, 1)] = blade;
}
